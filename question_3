import 'package:flutter/material.dart';
import 'dart:math';
  

void main() {
  runApp(LabelTheBoneApp());
}

class LabelTheBoneApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Label the Bone',
      theme: ThemeData.dark(),
      darkTheme:ThemeData.dark(),
      themeMode:ThemeMode.dark,
      home: IntroScreen(),
    );
  }
}

// Intro Screen
class IntroScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.blue,
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Welcome to Label the Bone!',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => GameScreen()),
                  );
                },
                child: Text('Start Game'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Question model
class Question {
  final String imageUrl;
  final String answer;

  Question({required this.imageUrl, required this.answer});
}

// Game Screen
class GameScreen extends StatefulWidget {
  @override
  _GameScreenState createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  final TextEditingController _controller = TextEditingController();

  final List<Question> questions = [
    Question(
      imageUrl: 'https://prod-images-static.radiopaedia.org/images/15727886/f8709f67e11a95e6387867d0f1f667.png',
      answer: 'humerus',
    ),
    Question(
      imageUrl: 'https://prod-images-static.radiopaedia.org/images/59335143/01e8913b5a0e873096af960f60af5f8dcb315ffb1a11901d32b98b5cb77f5103_big_gallery.jpeg',
      answer: 'skull',
    ),
    Question(
      imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Mandible_bone.png/800px-Mandible_bone.png',
      answer: 'mandible',
    ),
  ];

  int currentIndex = 0;
  
  @override
void initState() {
  super.initState();
  questions.shuffle(Random());
}


  void _checkAnswer() {
    final userAnswer = _controller.text.trim().toLowerCase();
    final correctAnswer = questions[currentIndex].answer.toLowerCase();

    if (userAnswer == correctAnswer) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Correct!')),
      );
      setState(() {
        if (currentIndex < questions.length - 1) {
          currentIndex++;
        } else {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: Text('You finished!'),
              content: Text('Restart the game?'),
              actions: [
                TextButton(
                  onPressed: () {
                    setState(() {
                      currentIndex = 0;
                    });
                    Navigator.of(context).pop();
                  },
                  child: Text('Yes'),
                ),
              ],
            ),
          );
        }
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Try again!')),
      );
    }

    _controller.clear();
  }

  @override
  Widget build(BuildContext context) {
    final currentQuestion = questions[currentIndex];

    return Scaffold(
      appBar: AppBar(title: Text('Label the Bone')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Text(
              'Question ${currentIndex + 1} of ${questions.length}',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 10),
            Expanded(
              child: Image.network(
                currentQuestion.imageUrl,
                fit: BoxFit.contain,
              ),
            ),
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter the label (e.g., humerus)',
              ),
              autofocus: true,
              textInputAction: TextInputAction.done,
              onSubmitted: (_) => _checkAnswer(),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _checkAnswer,
              child: Text('Submit'),
            ),
          ],
        ),
      ),
    );
  }
}
